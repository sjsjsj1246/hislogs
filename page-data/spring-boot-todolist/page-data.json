{"componentChunkName":"component---src-templates-blog-template-js","path":"/spring-boot-todolist/","result":{"data":{"cur":{"id":"848b3baa-7109-5fe6-8edc-8ed83a616c56","html":"<h2 id=\"프로젝트-설계\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EA%B3%84\" aria-label=\"프로젝트 설계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 설계</h2>\n<p>스프링에 관심이 좀 있었는데 토이 프로젝트를 하면서 사용해 보기로 했습니다.</p>\n<h3 id=\"기능\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%8A%A5\" aria-label=\"기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기능</h3>\n<table>\n<thead>\n<tr>\n<th>종류</th>\n<th>도메인</th>\n<th>uri</th>\n<th>method</th>\n<th>body</th>\n<th>response</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>투두목록 조회</td>\n<td>Todo</td>\n<td>/todo</td>\n<td>GET</td>\n<td>{tags:Tag[], start:Date, end:Date}</td>\n<td>Todo[]</td>\n</tr>\n<tr>\n<td>투두 추가</td>\n<td>Todo</td>\n<td>/todo</td>\n<td>POST</td>\n<td>Todo</td>\n<td>Todo</td>\n</tr>\n<tr>\n<td>투두 수정</td>\n<td>Todo</td>\n<td>/todo/:id</td>\n<td>PATCH</td>\n<td>Todo</td>\n<td>Todo</td>\n</tr>\n<tr>\n<td>투두 토글</td>\n<td>Todo</td>\n<td>/todo/toggle:id</td>\n<td>PATCH</td>\n<td>null</td>\n<td>Todo</td>\n</tr>\n<tr>\n<td>투두 삭제</td>\n<td>Todo</td>\n<td>/todo/:id</td>\n<td>DELETE</td>\n<td>null</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Todo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  content<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  modifiedDate<span class=\"token operator\">:</span> Date<span class=\"token punctuation\">;</span>\n  isConplete<span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">;</span>\n  tag<span class=\"token operator\">:</span> Tag<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Tag</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"design\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"fe\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"be\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"mobile\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"프로젝트-구조\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"프로젝트 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로젝트 구조</h3>\n<p>Spring boot 사용, version 2.7.5\njpa, db는 mysql 8버전 사용</p>\n<h4 id=\"종속성\" style=\"position:relative;\"><a href=\"#%EC%A2%85%EC%86%8D%EC%84%B1\" aria-label=\"종속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>종속성</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">dependencies {\n    compileOnly 'org.projectlombok:lombok'\n    annotationProcessor 'org.projectlombok:lombok'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-validation'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'mysql:mysql-connector-java'\n}</code></pre></div>\n<h4 id=\"applicationproperties\" style=\"position:relative;\"><a href=\"#applicationproperties\" aria-label=\"applicationproperties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application.properties</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//DB 설정\nspring.datasource.url={jdbc:mysql로 시작하는 디비주소}\nspring.datasource.username={유저}\nspring.datasource.password={패스워드}\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n\n//JPA 설정\nspring.jpa.show-sql=true\nspring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect //MySQL 8버전 사용함\nspring.jpa.database=mysql\nspring.jpa.hibernate.ddl-auto=update\nspring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy\nspring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl\nspring.jpa.generate-ddl=false\nspring.jpa.properties.hibernate.format_sql=true\nspring.jpa.properties.hibernate.enable_lazy_load_no_trans=true</code></pre></div>\n<h2 id=\"개발\" style=\"position:relative;\"><a href=\"#%EA%B0%9C%EB%B0%9C\" aria-label=\"개발 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개발</h2>\n<h3 id=\"domain-정의\" style=\"position:relative;\"><a href=\"#domain-%EC%A0%95%EC%9D%98\" aria-label=\"domain 정의 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Domain 정의</h3>\n<p>인증도 없는 간단한 투두리스트 프로젝트이기 때문에 도메인은 Todo 하나 뿐입니다.</p>\n<p>먼저 Entity를 작성해주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Todo</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span>\n    <span class=\"token comment\">//PK를 지정해주었습니다.</span>\n    <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//기본키 생성 전략을 MySQL에 맡깁니다. AUTO_INCREMENT로 생성될 것입니다.</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> isComplete<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TagEnum</span> tag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> modifiedDate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TagEnum</span> tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>content <span class=\"token operator\">=</span> content<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> tag<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isComplete <span class=\"token operator\">=</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FALSE</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modifiedDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">TagEnum</span> <span class=\"token punctuation\">{</span>\n        global<span class=\"token punctuation\">,</span> pm<span class=\"token punctuation\">,</span> design<span class=\"token punctuation\">,</span> fe<span class=\"token punctuation\">,</span> be<span class=\"token punctuation\">,</span> mobile\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"repository\" style=\"position:relative;\"><a href=\"#repository\" aria-label=\"repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Repository</h3>\n<p>JPA의 repository를 정의해줍니다. 날짜를 통해 투두를 찾는 내부 메서드를 추가로 정의해주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TodoRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findAllByModifiedDateBetween</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocalDate</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LocalDate</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"controller\" style=\"position:relative;\"><a href=\"#controller\" aria-label=\"controller permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Controller</h3>\n<p>/todo에 6개의 endpoint를 정의해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token annotation punctuation\">@RequestMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/todo\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoController</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TodoService</span> todoService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoListResponse</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTodoList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span><span class=\"token punctuation\">(</span>required <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">TodoListRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">getTodoList</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PostMapping</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">createTodoList</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">TodoPatchRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CREATED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getTodo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">getTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PatchMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">TodoPatchRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        todoService<span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@PatchMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/toggle/{id}\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token annotation punctuation\">@Valid</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span><span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"dto\" style=\"position:relative;\"><a href=\"#dto\" aria-label=\"dto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DTO</h4>\n<p>DTO들을 정의해주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Boolean</span> isComplete<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Todo<span class=\"token punctuation\">.</span>TagEnum</span> tag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> modifiedDate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// TodoDTO.from을 통해 todo를 쉽게 todoDTO로 바꿀 수 있습니다.</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Todo</span> todo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">(</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getIsComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                todo<span class=\"token punctuation\">.</span><span class=\"token function\">getModifiedDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoListResponse</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> todoList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TodoListResponse</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">></span></span> todoList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TodoListResponse</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> todoList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoPatchRequest</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@NotNull</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> title<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> content<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Todo<span class=\"token punctuation\">.</span>TagEnum</span> tag<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Todo</span> <span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Todo</span> todo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Todo</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">,</span> tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> todo<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoListRequest</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo<span class=\"token punctuation\">.</span>TagEnum</span><span class=\"token punctuation\">></span></span> tags<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> start<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">LocalDate</span> end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"service\" style=\"position:relative;\"><a href=\"#service\" aria-label=\"service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service</h3>\n<p>서비스 코드들입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TodoRepository</span> todoRepository<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TodoListResponse</span> <span class=\"token function\">getTodoList</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoListRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Todo</span><span class=\"token punctuation\">></span></span> todoList<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoListResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoDto</span><span class=\"token operator\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            todoList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAllByModifiedDateBetween</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n            todoList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//태그 검사</span>\n        todoList <span class=\"token operator\">=</span>  todoList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>todo <span class=\"token operator\">-></span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getTags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoListResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todoList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoDto</span><span class=\"token operator\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token function\">createTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TodoPatchRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">toEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token function\">getTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotExistTodoException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token function\">updateTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TodoPatchRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Todo</span> todo <span class=\"token operator\">=</span> todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotExistTodoException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        todo<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        todo<span class=\"token punctuation\">.</span><span class=\"token function\">setContent</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        todo<span class=\"token punctuation\">.</span><span class=\"token function\">setTag</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Transactional</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TodoDto</span> <span class=\"token function\">toggleTodo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Todo</span> todo <span class=\"token operator\">=</span> todoRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElseThrow</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NotExistTodoException</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        todo<span class=\"token punctuation\">.</span><span class=\"token function\">setIsComplete</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>todo<span class=\"token punctuation\">.</span><span class=\"token function\">getIsComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">TodoDto</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>todo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"배포\" style=\"position:relative;\"><a href=\"#%EB%B0%B0%ED%8F%AC\" aria-label=\"배포 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배포</h2>\n<p>우분투에 jdk, mysql, nginx를 설치해줍니다.</p>\n<h3 id=\"nginx-설정\" style=\"position:relative;\"><a href=\"#nginx-%EC%84%A4%EC%A0%95\" aria-label=\"nginx 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nginx 설정</h3>\n<p>저는 도메인을 가지고 있어서 여기로 연결하고자 했습니다.\nA레코드로 todo.도메인.xx을 서버 주소로 매핑시켰습니다.</p>\n<p>여기서 그치면 안되고 이 도메인으로 접속한 유저를 서버 내의 스프링 애플리케이션으로 포팅해줘야 합니다.</p>\n<p>/etc/nginx/sites-available/todo.도메인.xx</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">server {\n listen 80;\n server_name todo.도메인.xx;\n\n location / {\n  proxy_pass http://127.0.0.1:8080/;\n  proxy_redirect off;\n  proxy_set_header X-Forwarded-Host $host;\n  proxy_set_header Host \"todo.도메인.xx\";\n  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n  proxy_set_header X-Real-IP $remote_addr;\n }\n}\n</code></pre></div>\n<p>그후 소프트링크 연결\nsudo ln -s /etc/nginx/sites-available/todo.도메인.xx /etc/nginx/sites-enabled/todo.도메인.xx</p>\n<p>sertbot으로 https 인증서 등록</p>\n<blockquote>\n<p>참고 <a href=\"https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04\">https://www.digitalocean.com/community/tutorials/how-to-secure-nginx-with-let-s-encrypt-on-ubuntu-20-04</a></p>\n</blockquote>\n<h3 id=\"빌드-및-실행\" style=\"position:relative;\"><a href=\"#%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EC%8B%A4%ED%96%89\" aria-label=\"빌드 및 실행 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>빌드 및 실행</h3>\n<p>프로젝트 루트에서</p>\n<ol>\n<li>./gradlew build</li>\n<li>nohup java -jar build/libs/빌드된_파일_이름.jar &#x26;</li>\n</ol>\n<p>백그라운드로 스프링 부트 애플리케이션이 동작하게 됩니다.</p>\n<p>프로세스를 종료하고싶다면</p>\n<ol>\n<li>ps -ef | grep 빌드파일이름\n<ol>\n<li>이 명령어로 pid를 찾습니다.</li>\n</ol>\n</li>\n<li>kill -9 {pid}</li>\n</ol>\n<hr>\n<p>얕은 지식으로 스프링 부트를 경험해보고 배포도 해봤습니다.\n자세한 설명이 필요하신 부분 있다면 댓글 달아주세요</p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%84%A4%EA%B3%84\">프로젝트 설계</a></p>\n<ul>\n<li>\n<p><a href=\"#%EA%B8%B0%EB%8A%A5\">기능</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%A1%B0\">프로젝트 구조</a></p>\n<ul>\n<li><a href=\"#%EC%A2%85%EC%86%8D%EC%84%B1\">종속성</a></li>\n<li><a href=\"#applicationproperties\">application.properties</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B0%9C%EB%B0%9C\">개발</a></p>\n<ul>\n<li>\n<p><a href=\"#domain-%EC%A0%95%EC%9D%98\">Domain 정의</a></p>\n</li>\n<li>\n<p><a href=\"#repository\">Repository</a></p>\n</li>\n<li>\n<p><a href=\"#controller\">Controller</a></p>\n<ul>\n<li><a href=\"#dto\">DTO</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#service\">Service</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B0%B0%ED%8F%AC\">배포</a></p>\n<ul>\n<li><a href=\"#nginx-%EC%84%A4%EC%A0%95\">Nginx 설정</a></li>\n<li><a href=\"#%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EC%8B%A4%ED%96%89\">빌드 및 실행</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"프로젝트 설계 스프링에 관심이 좀 있었는데 토이 프로젝트를 하면서 사용해 보기로 했습니다. 기능 종류 도메인 uri method body response 투두목록 조회 Todo /todo GET {tags:Tag[], start:Date, end:Date} Todo[] 투두 추가 Todo /todo POST Todo Todo 투두 수정 Todo /todo/:id PATCH Todo Todo 투두 토글 Todo /todo/toggle:id PATCH null Todo 투두 삭제 Todo /todo/:id DELETE null null 프로젝트 구조 Spring boot 사용, version 2.7.5\njpa, db는 mysql 8버전 사용 종속성 application.properties 개발 Domain 정의 인증도 없는 간단한 투두리스트 프로젝트이기 때문에 도메인은 Todo 하나 뿐입니다. 먼저 Entity를 작성해주었습니다. Repository JPA의 repository를 정의…","frontmatter":{"date":"2022-11-8","title":"Spring Boot 배포 일지 (Feat. TodoList 프로젝트)","categories":"블로그","author":"sjsjsj1246","emoji":"🍃"},"fields":{"slug":"/spring-boot-todolist/"}},"next":{"id":"5819ebbb-6211-53ff-b340-29885992de09","html":"<h2 id=\"1-1-변수\" style=\"position:relative;\"><a href=\"#1-1-%EB%B3%80%EC%88%98\" aria-label=\"1 1 변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 변수</h2>\n<h3 id=\"1-1-변수란-무엇인가-왜-필요한가\" style=\"position:relative;\"><a href=\"#1-1-%EB%B3%80%EC%88%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\" aria-label=\"1 1 변수란 무엇인가 왜 필요한가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-1. 변수란 무엇인가? 왜 필요한가?</h3>\n<blockquote>\n<p><code class=\"language-text\">변수(variable)</code>는 하나의 값을 저장하기 위해 확보한 메모리 공간 자체 또는 그 메모리 공간을 식별하기 위해 붙인 이름을 말한다.</p>\n</blockquote>\n<p>다음과 같은 자바스크립트 코드를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>자바스크립트 엔진은 위 코드를 평가(evaluation)하기 위해 10, 20, + 라는 기호(리터럴literal과 연산자operator)의 의미를 알고 있어야 하며, 10 + 20이라는 표현식(expression)의 의미도 해석(파싱parsing)할 수 있어야 한다.</p>\n<p>자바스크립트 엔진이 + 연산을 수행하기 위해 먼저 피연산자(operand) 10, 20을 기억해야 한다. 컴퓨터는 이를 메모리에 저장하고 읽는다. CPU는 메모리에 있는 피연산자를 읽어 + 연산을 수행한 뒤 30이라는 값을 다른 메모리 공간에 저장한다.</p>\n<p>하지만 이대로는 30이라는 메모리 주소에 직접 접근하는 것 말고는 값을 재사용할 수 없다. 자바스크립트는 개발자가 메모리에 직접 접근하도록 허용하지 않으므로 30이라는 값에 접근할 수 없다.</p>\n<p>이를 해결하기 위해 변수라는 개념이 존재한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>10 + 20을 통한 연산의 결과를 result라는 메모리 공간에 붙여진 이름을 통해 저장하여 재사용할 수 있게 됐다.</p>\n<p>변수에 값을 저장하는 것을 할당이라 하고, 변수에 저장된 값을 읽어 들이는 것을 참조라 한다.</p>\n<h3 id=\"1-2-변수-선언\" style=\"position:relative;\"><a href=\"#1-2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-label=\"1 2 변수 선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. 변수 선언</h3>\n<blockquote>\n<p><code class=\"language-text\">변수 선언(declaration)</code>이란 값을 저장하기 위한 메모리 공간을 확보(allocate)하고 변수 이름과 확보된 메모리 공간의 주소를 연결(name binding)해서 값을 저장할 수 있게 준비하는 것이다.</p>\n</blockquote>\n<p>변수를 사용하려면 반드시 선언이 필요하다. 변수를 선언할 떄는 var, let, const 키워드를 사용한다.</p>\n<p>let, const 키워드는 ES6에서 도입되었다.</p>\n<blockquote>\n<p><code class=\"language-text\">키워드</code>는 자바스크립트 코드를 해석하고 실행하는 자바스크립트 엔진이 수행할 동작을 규정한 일종의 명령어이다.</p>\n</blockquote>\n<blockquote>\n<p><strong>ES5</strong> vs <strong>ES6</strong>\nvar 키워드는 여러 단점이 있다. block-level-scope를 지원하지 않고 function-level-scope를 지원한다는 것이다.\nES6는 ES5의 superset이며 ES5 환경에서도 트랜스파일러를 이용해 ES6를 컴파일 할 수 있다. (babel과 polyfill)</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> score<span class=\"token punctuation\">;</span></code></pre></div>\n<p>변수 선언에 의해 확보된 <code class=\"language-text\">메모리 공간</code>은 비어 있을 것으로 생각할 수 있으나 <code class=\"language-text\">확보된 메모리 공간</code>에는 자바스크립트 엔진에 의해 <code class=\"language-text\">undefined</code>라는 값이 암묵적으로 <code class=\"language-text\">할당</code>되어 <code class=\"language-text\">초기화</code>된다.(이것은 자바스크립트의 독특한 특징이다.)</p>\n<blockquote>\n<p><code class=\"language-text\">초기화(initialization)</code>는변수가 선언된 이후 최초로 값을 할당하는 것을 말한다.</p>\n</blockquote>\n<p>자바스크립트 엔진은 변수 선언을 다음과 같은 2단계에 거쳐 수행한다.</p>\n<ul>\n<li><strong>선언 단계</strong> - 변수 이름을 등록해서 자바스크립트 엔진에 변수의 존재를 알린다.</li>\n<li><strong>초기화 단계</strong> - 값을 저장하기 위한 메모리 공간을 확보하고 암묵적으로 undefined를 할당해 초기화한다.</li>\n</ul>\n<p>초기화 단계를 거치지 않으면 확보된 메모리 공간에는 이전에 다른 애플리케이션이 사용했던 값이 남아있을 수 있다. 이러한 값을 <code class=\"language-text\">쓰레기 값(garbage value)</code>이라 한다. 하지만 자바스크립트는 암묵적으로 초기화를 수행하므로 이런 위험이 없다.</p>\n<p>선언하지 않은 식별자에 접근하면 <code class=\"language-text\">ReferenceError(참조에러)</code>가 발생한다.</p>\n<blockquote>\n<p>자바스크립트는 컴파일 언어이다.\nJavascript는 실행되기 전에 마이크로초(또는 그 이하) 시간동안 컴파일 된다.\n(JIT, with lazy compile and even hot re-compile 등 기술 참고)\nTokenizing/Lexing → Parsing → Code-Generation</p>\n</blockquote>\n<p>var a = 2;를 만나면</p>\n<ol>\n<li>컴파일러는 var 키워드를 보고 Scope에 해당 변수 선언을 요청한다. 그 후 엔진이 실행할 수 있는 코드를 생성한다 a = 2</li>\n<li>프로그램 실행 후 a = 2를 만난 엔진은 Scope에서 해당 a를 찾고 값을 할당하는 일을 한다. (LHS look-up)</li>\n</ol>\n<h3 id=\"1-3-변수-선언의-실행-시점과-변수-호이스팅\" style=\"position:relative;\"><a href=\"#1-3-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\" aria-label=\"1 3 변수 선언의 실행 시점과 변수 호이스팅 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. 변수 선언의 실행 시점과 변수 호이스팅</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n\n<span class=\"token keyword\">var</span> score<span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 코드에서 참조에러가 발생하지 않고 <code class=\"language-text\">undefined</code>가 출력이 되는 이유는 변수 선언이 소스코드가 한 줄씩 순차적으로 실행되는 시점, 즉 런타임이 아니라 그 이전 단계에서 먼저 실행되기 때문이다.</p>\n<p>자바스크립트 엔진은 소스코드를 한 줄씩 순차적으로 실행하기에 앞서 먼저 소스코드의 평가 과정을 거치면서 소스코드를 실행하기 위한 준비를 한다.</p>\n<p>이때, 소스코드 실행을 위한 준비 단계인 소스코드의 평가 과정에서 자바스크립트 엔진은 변수 선언을 포함한 모든 선언문(변수 선언문, 함수 선언문등)을 소스코드에서 찾아내 먼저 실행한다.</p>\n<p>그리고, 소스코드의 평가 과정이 끝나면 비로소 변수 선언을 포함한 모든 선언문을 제외하고 소스코드를 한 줄식 순차적으로 실행한다.</p>\n<p>즉, 자바스크립트 엔진은 변수 선언이 어디에 있든 상관없이 다른 코드보다 먼저 실행한다.</p>\n<p>이처럼 변수 선언문이 코드의 선두로 끌어 올려진 것처럼 동작하는 자바스크립트 고유의 특징을 변수 <code class=\"language-text\">호이스팅</code>이라 한다.</p>\n<h3 id=\"1-4-값의-할당\" style=\"position:relative;\"><a href=\"#1-4-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\" aria-label=\"1 4 값의 할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-4. 값의 할당</h3>\n<p>변수에 값을 할당할 때는 <code class=\"language-text\">할당(assignment) 연산자 =</code>를 사용한다. 할당 연산자는 우변의 값을 좌변의 변수에 할당한다.</p>\n<p>변수 선언은 소스코드가 순차적으로 실행되는 시점인 런타임 이전에 먼저 실행되지만 <code class=\"language-text\">값의 할당</code>은 소스코드가 순차적으로 실행되는 시점인 런타임에 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n\n<span class=\"token keyword\">var</span> score<span class=\"token punctuation\">;</span>\nscore <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>score<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 80</span></code></pre></div>\n<p>변수에 값을 할당할 때는 이전 값 <code class=\"language-text\">undefined</code>가 저장되어 있는 메모리 공간을 지우고 그 메모리 공간에 할당 값 80을 새롭게 저장하는 것이 아니라 새로운 메모리 공간을 확보하고 그곳에 할당 값 80을 저장한다.</p>\n<h3 id=\"1-5-값의-재할당\" style=\"position:relative;\"><a href=\"#1-5-%EA%B0%92%EC%9D%98-%EC%9E%AC%ED%95%A0%EB%8B%B9\" aria-label=\"1 5 값의 재할당 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-5. 값의 재할당</h3>\n<p><code class=\"language-text\">재할당</code>이란 이미 값이 할당되어 있는 변수에 새로운 값을 또다시 <code class=\"language-text\">할당</code>하는 것을 말한다.</p>\n<p>var 키워드로 선언한 변수는 선언과 동시에 <code class=\"language-text\">undefined</code>로 초기화되기 때문에 엄밀히 말하자면 변수에 처음으로 값을 할당하는 것도 사실은 <code class=\"language-text\">재할당</code>이다.</p>\n<p>값을 재할당할 수 없어서 변수에 저장된 값을 변경할 수 없다면 변수가 아니라 <code class=\"language-text\">상수</code>다.</p>\n<p><code class=\"language-text\">상수</code>는 단 <code class=\"language-text\">한 번만</code> 할당할 수 있는 <code class=\"language-text\">변수</code>다.</p>\n<p><code class=\"language-text\">변수에 값을 재할당</code>할때는 처음에 변수에 값을 할당할 때처럼 이전 값이 저장되어 있던 메모리 공간에 새로운 값을 저장하는 것이 아니라 <code class=\"language-text\">새로운 메모리 공간</code>을 확보하고 그 <code class=\"language-text\">메모리 공간에 새로운 값을 저장하는 것</code>이다.</p>\n<p>이후, 어떤 식별자와도 연결되어 있지 않은 불필요한 값들은 <code class=\"language-text\">가비지 컬렉터</code>에 의해 메모리에서 자동 해제된다. 단, 메모리에서 언제 해제될지는 예측할 수 없다.</p>\n<blockquote>\n<p>자바스크립트에서 재할당을 할 때는 기존에 있던 메모리 공간에 값을 할당하지 않습니다.\n만약 기존에 있던 메모리 공간의 크기가 할당할 값보다 작다면 그 메모리를 늘려주는 작업도 해야 할 겁니다. 비용이 많이 들죠 그렇지 않고 다른 메모리 공간에 값을 저장해놓고 식별자 foo는 그 메모리 공간을 가리키기만 하면 되겠죠\n즉 메모리의 효율적인 처리를 위해 이런 동작을 하고 재할당이 일어날 때 마다 새로운 메모리 공간을 할당하며 기존에 있던 메모리 공간은 가비지 컬렝터의 대상이 됩니다</p>\n</blockquote>\n<h2 id=\"2-스코프\" style=\"position:relative;\"><a href=\"#2-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"2 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 스코프</h2>\n<h3 id=\"2-1-스코프란\" style=\"position:relative;\"><a href=\"#2-1-%EC%8A%A4%EC%BD%94%ED%94%84%EB%9E%80\" aria-label=\"2 1 스코프란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. 스코프란?</h3>\n<blockquote>\n<p><code class=\"language-text\">스코프(Scope)</code>는 식별자가 유효한 범위를 말한다.</p>\n</blockquote>\n<ul>\n<li>자바스크립트의 스코프는 다른 언어의 스코프와 구별되는 특징이 있다.</li>\n<li>var 키워드로 선언한 변수와 let 또는 const 키워드로 선언한 변수의 스코프도 다르게 동작한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> var1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//코드 가장 바깥 영역에서 선언한 변수</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> var2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 내에서 선언한 변수</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ReferenceError : var4 is not defined</span></code></pre></div>\n<p>모든 식별자 (변수이름, 함수이름, 클래스 이름 등)는 자신이 선언된 위치에 의해 다른 코드가 식별자 자신을 참조할 수 있는 유효범위, 즉 스코프가 결정된다.</p>\n<p><strong>식별자결정</strong> : 자바스크립트 엔진은 이름이 같은 두 변수 중 어떤 변수를 참조해야 할 것인지를 결정</p>\n<p>따라서 <code class=\"language-text\">스코프란 자바스크립트 엔진이 식별자를 검색할 때 사용하는 규칙</code>이라고도할 수 있다.</p>\n<blockquote>\n<p>💡 코드의 문맥은 렉시컬환경으로 이뤄진다. 이를 구현한 것이 실행컨텍스트이며, 모든 코드는 실행컨텍스트에서 평가되고 실행된다.</p>\n</blockquote>\n<h4 id=\"2-1-1-스코프는-네임스페이스다\" style=\"position:relative;\"><a href=\"#2-1-1-%EC%8A%A4%EC%BD%94%ED%94%84%EB%8A%94-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8B%A4\" aria-label=\"2 1 1 스코프는 네임스페이스다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1-1. 스코프는 네임스페이스다.</h4>\n<p>스코프 내에서 식별자는 유일해야 하지만, 다른 스코프에는 같은 이름의 식별자를 사용할 수 있다.</p>\n<h4 id=\"2-1-2-var-키워드로-선언한-변수의-중복선언\" style=\"position:relative;\"><a href=\"#2-1-2-var-%ED%82%A4%EC%9B%8C%EB%93%9C%EB%A1%9C-%EC%84%A0%EC%96%B8%ED%95%9C-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A4%91%EB%B3%B5%EC%84%A0%EC%96%B8\" aria-label=\"2 1 2 var 키워드로 선언한 변수의 중복선언 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1-2. var 키워드로 선언한 변수의 중복선언</h4>\n<p>var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다. 이는 의도치 않게 변수 값이 재할당되어 변경되는 부작용을 발생시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// var로 선언된 변수는 같은 스코프 내에서 중복선언이 허용된다.</span>\n  <span class=\"token comment\">// 아래 변수 선언문은 자바스크립트 엔진에 의해서 var 키워드가 없는 것처럼 동작한다.</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>let이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언을 허용하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//SyntaxError: Identifier 'x' has already been declared</span></code></pre></div>\n<h3 id=\"2-2-스코프-종류\" style=\"position:relative;\"><a href=\"#2-2-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%A2%85%EB%A5%98\" aria-label=\"2 2 스코프 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. 스코프 종류</h3>\n<p>코드는 전역과 지역으로 구분할 수 있다.</p>\n<table>\n<thead>\n<tr>\n<th>구분</th>\n<th>설명</th>\n<th>스코프</th>\n<th>변수</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>전역</td>\n<td>코드의 가장 바깥 영역</td>\n<td>전역 스코프</td>\n<td>전역변수</td>\n</tr>\n<tr>\n<td>지역</td>\n<td>함수 몸체 내부</td>\n<td>지역 스코프</td>\n<td>지역변수</td>\n</tr>\n</tbody>\n</table>\n<p>변수는 자신이 전언된 위치(전역/지역)에 의해 자신이 유효한 범위인 스코프(전역 스코프/지역 스코프)가 결정된다.</p>\n<h4 id=\"2-2-1-전역\" style=\"position:relative;\"><a href=\"#2-2-1-%EC%A0%84%EC%97%AD\" aria-label=\"2 2 1 전역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2-1. 전역</h4>\n<ul>\n<li>코드의 가장 바깥 영역, 전역에 변수를 선언하면 전역 스코프를 갖는 <strong>전역 변수</strong>가 된다,</li>\n<li>전역변수는 어디서든 참조 가능하다.</li>\n</ul>\n<h4 id=\"2-2-2-지역\" style=\"position:relative;\"><a href=\"#2-2-2-%EC%A7%80%EC%97%AD\" aria-label=\"2 2 2 지역 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2-2. 지역</h4>\n<ul>\n<li>함수 몸체 내부를 말한다. 지역에 변수를 선언하면 지역 스코프를 갖는 <strong>지역변수</strong>가 된다,</li>\n<li>지역 변수는 자신의 지역 스코프와, 하위 지역스코프에서 유효하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"global\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">\"local\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// local</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//global</span></code></pre></div>\n<p>foo 함수 내부에서 선언된 x는 지역변수다. 지역변수 x는 자신이 선언된 foo 내부에서만 참조 가능하다. 하지만 이 지역변수 x를 전역 또는 foo 함수 내부 이외의 지역에서 참조하면 참조 에러가 발생한다.</p>\n<p>그런데 foo 함수 외부에도 전역변수 x가 선언되어있다. 이 경우에 foo함수 내에서 x 변수를 참조하면 전역변수 x를 참조하는 것이 아니라 foo 함수 내부에 있는 x를 참조한다. 이는 자바스크립트 엔진이 <strong>스코프 체인</strong>을 통해 참조할 변수를 검색(identifier resolution)했기 때문이다.</p>\n<h3 id=\"2-3-스코프-체인\" style=\"position:relative;\"><a href=\"#2-3-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\" aria-label=\"2 3 스코프 체인 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. 스코프 체인</h3>\n<ul>\n<li>함수의 중첩 : 함수 몸체 내부에서 함수가 정의된 것</li>\n<li>중첩 함수 : 함수 몸체 내부에서 정의한 함수</li>\n<li>외부함수 : 중첩 함수를 포함하는 함수</li>\n</ul>\n<p>함수가 중첩될 수 있기 때문에 지역 스코프도 중첩될 수 있다. 이는 <strong>스코프가</strong> 함수의 중첩에 의해 <strong>계층적 구조</strong>를 갖는다는 것을 의미한다.</p>\n<p>중첩함수의 지역 스코프는 중첩 함수를 포함하는 외부 함수의 지역 스코프와 <code class=\"language-text\">계층적 구조</code>를 갖는다. 이때 <strong>외부 함수의 지역 스코프</strong>를 <strong>중첩 함수의 상위 스코프</strong>라고 한다.</p>\n<blockquote>\n<p>💡 모든 스코프가 계층적으로 연결된 것을 스코프 체인이라고 한다. 모든 지역 스코프의 최상위 스코프는 전역 스코프이다.</p>\n</blockquote>\n<ul>\n<li><strong>스코프 체인은 물리적인 실체로 존재한다.</strong>\n<ul>\n<li>자바스크립트 엔진은 코드실행에 앞서 <strong>렉시컬 환경</strong>을 실제로 <strong>생성</strong>한다.</li>\n<li><strong>변수 선언</strong>이 되면 변수 식별자가 이 렉시컬 환경에 키로 등록된다.</li>\n<li><strong>변수할당</strong>이 일어나면 렉시컬 환경의 변수 식별자에 해당하는 값을 변경한다.</li>\n<li><strong>변수 검색</strong>도 이 렉시컬 환경 상에서 일어난다.</li>\n<li><strong>변수를 참조할 때</strong> 자바스크립트 엔진은 <strong>스코프 체인</strong>을 통해 변수를 참조하는 코드의 스코프에서 시작하여 <strong>상위 스코프 방향으로 이동하며</strong> 선언된 변수를 <strong>검색</strong>한다. 이를 통해 <code class=\"language-text\">상위 스코프에서 선언한 변수를 하위 스코프에서도 참조 가능하다.</code></li>\n</ul>\n</li>\n<li><strong>스코프 체인은 렉시컬 환경을 단방향으로 연결한 것이다.</strong>\n<ul>\n<li>전역 렉시컬 환경은 코드가 로드되면 곧바로 생성된다.</li>\n<li>함수의 렉시컬 환경은 함수가 호출되면 곧바로 생성된다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-3-1-스코프-체인에-의한-변수-검색\" style=\"position:relative;\"><a href=\"#2-3-1-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B3%80%EC%88%98-%EA%B2%80%EC%83%89\" aria-label=\"2 3 1 스코프 체인에 의한 변수 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3-1. 스코프 체인에 의한 변수 검색</h4>\n<ul>\n<li>상위 스코프에서 유효한 변수는 하위 스코프에서 자유롭게 참조할 수 있다.</li>\n<li>하위 스코프에서 유효한 변수를 상위 스코프에서 참조할 수 없다.</li>\n<li>스코프의 계층적 구조는 부자 관계로 이뤄진 상속과 유사하다. ( 상속 : 상속을 통해 부모의 자산을 자식이 자유롭게 사용할 수 있지만 자식의 자산을 부모가 사용할 순 없다.)</li>\n</ul>\n<h4 id=\"2-3-2-스코프-체인에-의한-함수-검색\" style=\"position:relative;\"><a href=\"#2-3-2-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%97%90-%EC%9D%98%ED%95%9C-%ED%95%A8%EC%88%98-%EA%B2%80%EC%83%89\" aria-label=\"2 3 2 스코프 체인에 의한 함수 검색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3-2. 스코프 체인에 의한 함수 검색</h4>\n<ul>\n<li>함수도 식별자에 할당되기 때문에 스코프를 갖는다. 사실 함수는 식별자에 함수 객체가 할당된 것 외에는 일반 변수와 다를 바가 없다.</li>\n<li>따라서 스코프를 <strong>식별자를 검색하는 규칙</strong>이라고 표현하는 편이 좀 더 적합하다.</li>\n</ul>\n<h3 id=\"2-4-함수-레벨-스코프\" style=\"position:relative;\"><a href=\"#2-4-%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"2 4 함수 레벨 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-4. 함수 레벨 스코프</h3>\n<p>지역은 함수 몸체 내부를 말하고 지역은 지역 스코프를 만든다. 이는 코드 블록이 아닌 **<code class=\"language-text\">함수에 의해서만 지역 스코프가 생성된다</code>**는 의미다.</p>\n<ul>\n<li><strong>블록 레벨 스코프(block level scope)</strong>\n모든 코드 블록(if, for, while, try/catch 등)은 지역 스코프를 만든다.</li>\n<li><strong>함수 레벨 스코프(function level scope)</strong>\n<strong>var 키워드</strong>로 선언된 변수는 오로지 함수의 <strong>코드 블록(함수 몸체)</strong> 만을 <strong>지역 스코프</strong>로 인정한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// x는 전역 변수.</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10, 값이 재할당됨</span></code></pre></div>\n<p>var 키워드로 선언된 변수는 함수 레벨 스코프만 인정하기 때문에 <code class=\"language-text\">함수 밖에서 var 키워드로 선언된 변수는 코드 블록 내에서 선언</code>되었다고 하더라도 <strong>전역변수</strong>이다.</p>\n<blockquote>\n<p>따라서 전역변수 x는 중복 선언되고, 그 결과 전역변수의 재할당이 일어난다.</p>\n</blockquote>\n<h3 id=\"2-5-렉시컬-스코프\" style=\"position:relative;\"><a href=\"#2-5-%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\" aria-label=\"2 5 렉시컬 스코프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-5. 렉시컬 스코프</h3>\n<ul>\n<li><strong>동적 스코프(dynamic scope)</strong>\n<ul>\n<li><strong>함수를 어디서 호출했는지</strong>에 따라 함수의 상위 스코프를 결정한다.</li>\n</ul>\n</li>\n<li><strong>렉시컬 스코프(lexical scope) 또는 정적 스코프(static scope)</strong>\n<ul>\n<li><strong>함수를 어디서 정의했는지에 따라</strong> 함수의 상위 스코프를 결정한다.</li>\n</ul>\n</li>\n</ul>\n<p>자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬 스코프를 따른다.</p>\n<p>즉 함수의 상위 스코프는 언제나 자신이 정의된 스코프이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></code></pre></div>\n<p>결론적으로 var 키워드를 사용하여 변수를 정의하면</p>\n<ul>\n<li>함수 레벨 스코프를 따라 스코프가 결정된다.</li>\n<li>렉시컬 스코프에 의해 상위 스코프를 결정한다.</li>\n</ul>\n<h2 id=\"3-전역-변수의-문제점\" style=\"position:relative;\"><a href=\"#3-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"3 전역 변수의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 전역 변수의 문제점</h2>\n<h3 id=\"3-1-변수의-생명-주기\" style=\"position:relative;\"><a href=\"#3-1-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\" aria-label=\"3 1 변수의 생명 주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1. 변수의 생명 주기</h3>\n<h4 id=\"3-1-1-지역-변수의-생명-주기\" style=\"position:relative;\"><a href=\"#3-1-1-%EC%A7%80%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\" aria-label=\"3 1 1 지역 변수의 생명 주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1-1. 지역 변수의 생명 주기</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'global'</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">undefined</span>\n    <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'local'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//global</span></code></pre></div>\n<blockquote>\n<p>지역 변수의 생명 주기는 함수의 생명 주기와 일치한다</p>\n</blockquote>\n<ul>\n<li>함수 내부에서 선언된 지역 변수는 함수가 생성한 스코프에 등록된다. 따라서 <strong>변수는 자신이 등록된 스코프가 소멸될 때 (메모리가 해제될 때)까지 유효하다</strong></li>\n<li>할당된 메모리 공간은 더이상 그 누구도 참조하지 않을 때 가비지 콜렉터에 의해 메모리 풀에 반환된다.</li>\n</ul>\n<p><strong>지역 변수가 함수보다 오래 생존하는 경우도 있다</strong></p>\n<p><strong>누군가 메모리 공간을 참조한다면,</strong> 해제되지 않고 확보된 상태로 남아있게 된다.<br>\n스코프 또한 마찬가지로 <strong>누군가 스코프를 참조하고 있다면</strong> 스코프는 소멸하지 않고 생존하게 된다.<br>\n일반적으로 함수가 종료하면 함수가 생성한 스코프도 소멸하지만, <strong>누군가 스코프를 참조한다면</strong> 스코프는 해제되지 않고 생존한다</p>\n<h4 id=\"3-1-2전역-변수의-생명-주기\" style=\"position:relative;\"><a href=\"#3-1-2%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\" aria-label=\"3 1 2전역 변수의 생명 주기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-1-2.전역 변수의 생명 주기</h4>\n<p>함수와 달리 전역변수는 명시적 호출 없이 실행된다<br>\n특별한 진입점 없이 코드가 로드되자마자 해석되고 실행된다\n전역 코드는 반환문을 사용할 수 없으므로, 마지막 문이 실행되어 실행할 문이 없을때 종료한다</p>\n<p><strong>var 키워드로 선언한 전역 변수는 전역 객체의 프로퍼티가 된다</strong></p>\n<ul>\n<li>전역 변수의 생명 주기는 전역 객체의 생명주기와 일치한다</li>\n</ul>\n<p>전역객체란 코드가 실행되기 이전에 자바스크립트 엔진에 의해 어떤 객체보다도 먼저 생성되는 특수한 객체이다</p>\n<p>클라이언트 사이드 환경에서는(브라우저) window, 서버사이드 환경에서는(node.js)gloabl 객체를 의미한다</p>\n<p>전역 객체는 표준 빌트인 객체(Object, String, Number, Function, Array … )와 환경에 따른 호스트 객체(Web API, node.js의 호스트API), 그리고 var 키워드로 선언한 전역변수와 전역 함수를 프로퍼티로 갖는다</p>\n<ul>\n<li>브라우저 환경의 전역 객체는 window이고, var 키워드로 선언한 변수는 전역 객체 window의 프로퍼티이다\n<ul>\n<li>전역 객체 window는 웹페이지를 닫기 전까지 유효하므로, var 키워드로 선언한 전역 변수의 생명 주기는 전역객체의 생명주기와 일치한다</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-전역-변수의-문제점\" style=\"position:relative;\"><a href=\"#3-2-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"3 2 전역 변수의 문제점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-2. 전역 변수의 문제점</h3>\n<p>문제점 <strong>1. 암묵적 결합</strong><br>\n전역 변수를 선언하면, 모든 코드가 전역변수를 참조하고, 변경할 수 있는 암묵적 결합을 허용하는것이다<br>\n-> 변수의 유효 범위가 크면 클수록 코드의 가독성이 나빠지고, 의도치 않게 상태가 변경될 수 있는 위험성이 높아진다</p>\n<p>문제점 <strong>2. 긴 생명주기</strong><br>\n긴 생명주기를 가짐으로써 생기는 문제는<br>\n-> 메모리 리소스를 오랜기간 소비한다\n-> 상태 변경에 의한 오류가 발생할 확률이 크다</p>\n<p>문제점 <strong>3. 스코프 체인 상에서 종점에 존재</strong><br>\n-> 변수 검색 시, 가장 마지막에 검색되어 검색속도가 가장 느리다, 검색속도의 차이가 크지는 않지만 속도의 차이는 분명히 있다</p>\n<p>문제점 <strong>4. 네임스페이스 오염</strong>\njs의 문제점은 파일이 분리되어 있다고 해도 하나의 전역 스코프를 공유한다는 것,\n-> 다른 파일 내에 동일한 이름으로 변수를 사용할 경우, 예상치 못한 결과를 가져올 수 있다.</p>\n<h3 id=\"3-3-전역-변수의-사용을-억제하는-방법\" style=\"position:relative;\"><a href=\"#3-3-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%96%B5%EC%A0%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"3 3 전역 변수의 사용을 억제하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3. 전역 변수의 사용을 억제하는 방법</h3>\n<blockquote>\n<p>전역변수를 반드시 사용해야 할 이유가 없다면 지역변수를 사용해야 한다,<br>\n변수의 스코프는 좁을수록 좋다</p>\n</blockquote>\n<h4 id=\"3-3-1-즉시-실행-함수\" style=\"position:relative;\"><a href=\"#3-3-1-%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89-%ED%95%A8%EC%88%98\" aria-label=\"3 3 1 즉시 실행 함수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3-1. 즉시 실행 함수</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 에러!!</span></code></pre></div>\n<p>모든 코드를 즉시실행함수로 감싸면 모든 변수는 즉시실행함수의 지역변수가 된다<br>\n-> 전역 변수의 사용을 제한할 수 있다</p>\n<h4 id=\"3-3-2-네임스페이스-객체\" style=\"position:relative;\"><a href=\"#3-3-2-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B0%9D%EC%B2%B4\" aria-label=\"3 3 2 네임스페이스 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3-2. 네임스페이스 객체</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token constant\">MYAPP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 전역 네임스페이스 객체</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Lee'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Lee</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">var</span> <span class=\"token constant\">MYAPP</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>person <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">//네임스페이스를 계층적으로 구성할 수도 있다.</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">\"Lee\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">address</span><span class=\"token operator\">:</span><span class=\"token string\">\"Seoul\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MYAPP</span><span class=\"token punctuation\">.</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Lee</span>\n</code></pre></div>\n<p>전역에 네임스페이스 역할을 담당할 객체를 생성하고, 전역 변수처럼 사용하고 싶은 변수를 프로퍼티로 추가한다<br>\n네임스페이스 분리로 식별자 충돌을 방지할 수는 있으나, 객체 자체가 전역변수에 할당되므로 그닥 유용하진 않다</p>\n<h4 id=\"3-3-3-모듈-패턴\" style=\"position:relative;\"><a href=\"#3-3-3-%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4\" aria-label=\"3 3 3 모듈 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3-3. 모듈 패턴</h4>\n<p>모듈 패턴은 클래스를 모방한다, 관련이 있는 변수와 함수를 모아 즉시 실행함수로 감싸 하나의 모듈을 만든다</p>\n<ul>\n<li>자바스크립트의 클로저를 기반으로 동작함</li>\n<li>전역변수 억제 및 캡슐화 구현 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n  <span class=\"token comment\">//즉시실행 함수의 반환값을 Counter 변수에 할당</span>\n  <span class=\"token keyword\">var</span> Counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">//private 변수, 캡슐화, 정보은닉,</span>\n    <span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 외부로 공개할 데이터, 메서드를 프로퍼티로 추가한 객체를 반환한다</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">increse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">++</span>num<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">decrease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">--</span>num<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">)</span> <span class=\"token comment\">//undefined;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Counter<span class=\"token punctuation\">.</span><span class=\"token function\">decrease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n</code></pre></div>\n<h4 id=\"3-3-4-es6-모듈\" style=\"position:relative;\"><a href=\"#3-3-4-es6-%EB%AA%A8%EB%93%88\" aria-label=\"3 3 4 es6 모듈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3-3-4. ES6 모듈</h4>\n<p>ES6 모듈은 파일 자체의 독자적인 모듈 스코프를 제공한다<br>\n-> 모듈 내의 var 키워드로 선언한 변수는 더이상 전역변수가 아니며, window의 객체 프로퍼티도 아니다</p>\n<ul>\n<li>script 태그에 type=“module” 어트리뷰트를 추가하면, 로드된 자바스크립트 파일은 모듈로서 동작한다.</li>\n<li>모듈의 파일 확장자는 mjs를 권장</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lib.mjs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.mjs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>ES6는 IE 포함 구형 브라우저에서 동작하지 않는다</li>\n<li>ES6의 모듈 기능을 사용하더라도 트랜스파일링이나 번들링이 필요하기 때문에 아직까지 브라우저의 ES6 모듈보다는 Webpack등의 모듈 번들러를 사용한다</li>\n</ul>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#1-1-%EB%B3%80%EC%88%98\">1-1. 변수</a></p>\n<ul>\n<li><a href=\"#1-1-%EB%B3%80%EC%88%98%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-%EC%99%9C-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80\">1-1. 변수란 무엇인가? 왜 필요한가?</a></li>\n<li><a href=\"#1-2-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\">1-2. 변수 선언</a></li>\n<li><a href=\"#1-3-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8%EC%9D%98-%EC%8B%A4%ED%96%89-%EC%8B%9C%EC%A0%90%EA%B3%BC-%EB%B3%80%EC%88%98-%ED%98%B8%EC%9D%B4%EC%8A%A4%ED%8C%85\">1-3. 변수 선언의 실행 시점과 변수 호이스팅</a></li>\n<li><a href=\"#1-4-%EA%B0%92%EC%9D%98-%ED%95%A0%EB%8B%B9\">1-4. 값의 할당</a></li>\n<li><a href=\"#1-5-%EA%B0%92%EC%9D%98-%EC%9E%AC%ED%95%A0%EB%8B%B9\">1-5. 값의 재할당</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-%EC%8A%A4%EC%BD%94%ED%94%84\">2. 스코프</a></p>\n<ul>\n<li>\n<p><a href=\"#2-1-%EC%8A%A4%EC%BD%94%ED%94%84%EB%9E%80\">2-1. 스코프란?</a></p>\n<ul>\n<li><a href=\"#2-1-1-%EC%8A%A4%EC%BD%94%ED%94%84%EB%8A%94-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EB%8B%A4\">2-1-1. 스코프는 네임스페이스다.</a></li>\n<li><a href=\"#2-1-2-var-%ED%82%A4%EC%9B%8C%EB%93%9C%EB%A1%9C-%EC%84%A0%EC%96%B8%ED%95%9C-%EB%B3%80%EC%88%98%EC%9D%98-%EC%A4%91%EB%B3%B5%EC%84%A0%EC%96%B8\">2-1-2. var 키워드로 선언한 변수의 중복선언</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-2-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%A2%85%EB%A5%98\">2-2. 스코프 종류</a></p>\n<ul>\n<li><a href=\"#2-2-1-%EC%A0%84%EC%97%AD\">2-2-1. 전역</a></li>\n<li><a href=\"#2-2-2-%EC%A7%80%EC%97%AD\">2-2-2. 지역</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-3-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8\">2-3. 스코프 체인</a></p>\n<ul>\n<li><a href=\"#2-3-1-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%97%90-%EC%9D%98%ED%95%9C-%EB%B3%80%EC%88%98-%EA%B2%80%EC%83%89\">2-3-1. 스코프 체인에 의한 변수 검색</a></li>\n<li><a href=\"#2-3-2-%EC%8A%A4%EC%BD%94%ED%94%84-%EC%B2%B4%EC%9D%B8%EC%97%90-%EC%9D%98%ED%95%9C-%ED%95%A8%EC%88%98-%EA%B2%80%EC%83%89\">2-3-2. 스코프 체인에 의한 함수 검색</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#2-4-%ED%95%A8%EC%88%98-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84\">2-4. 함수 레벨 스코프</a></p>\n</li>\n<li>\n<p><a href=\"#2-5-%EB%A0%89%EC%8B%9C%EC%BB%AC-%EC%8A%A4%EC%BD%94%ED%94%84\">2-5. 렉시컬 스코프</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">3. 전역 변수의 문제점</a></p>\n<ul>\n<li>\n<p><a href=\"#3-1-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\">3-1. 변수의 생명 주기</a></p>\n<ul>\n<li><a href=\"#3-1-1-%EC%A7%80%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\">3-1-1. 지역 변수의 생명 주기</a></li>\n<li><a href=\"#3-1-2%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%83%9D%EB%AA%85-%EC%A3%BC%EA%B8%B0\">3-1-2.전역 변수의 생명 주기</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#3-2-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EB%AC%B8%EC%A0%9C%EC%A0%90\">3-2. 전역 변수의 문제점</a></p>\n</li>\n<li>\n<p><a href=\"#3-3-%EC%A0%84%EC%97%AD-%EB%B3%80%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9%EC%9D%84-%EC%96%B5%EC%A0%9C%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">3-3. 전역 변수의 사용을 억제하는 방법</a></p>\n<ul>\n<li><a href=\"#3-3-1-%EC%A6%89%EC%8B%9C-%EC%8B%A4%ED%96%89-%ED%95%A8%EC%88%98\">3-3-1. 즉시 실행 함수</a></li>\n<li><a href=\"#3-3-2-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4-%EA%B0%9D%EC%B2%B4\">3-3-2. 네임스페이스 객체</a></li>\n<li><a href=\"#3-3-3-%EB%AA%A8%EB%93%88-%ED%8C%A8%ED%84%B4\">3-3-3. 모듈 패턴</a></li>\n<li><a href=\"#3-3-4-es6-%EB%AA%A8%EB%93%88\">3-3-4. ES6 모듈</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"2022-10-15","title":"Javascript: 1. 변수와 스코프 (Web 개발자라면 이정도는 알아야지)","categories":"Javascript","author":"sjsjsj1246","emoji":"🖐️"},"fields":{"slug":"/js/1_variable/"}},"prev":{"id":"a46980fc-f27b-50db-b0b7-db61fbd38346","html":"<h1 id=\"쿠키와-세션-세션\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%99%80-%EC%84%B8%EC%85%98-%EC%84%B8%EC%85%98\" aria-label=\"쿠키와 세션 세션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키와 세션.. (세션?)</h1>\n<p>상태: Not started\n생성일: 2023년 4월 19일 오전 11:25</p>\n<p>쿠키와 세션 자주 들었는데 이번 기회로 명확히 알아봅시다.</p>\n<p>먼저 이 기술이 등장한 배경을 이해해야 합니다.</p>\n<p>HTTP 프로토콜은 stateless(무상태), connectionless(비연결지향) 특성을 가지고 있기 떄문에 클라이언트의 요청에 대해 어떤 클라이언트인지 식별할 수 없습니다.</p>\n<blockquote>\n<p>Stateless: 커넥션이 종료되는 순간 상태정보를 유지하지 않는 특성</p>\n</blockquote>\n<blockquote>\n<p>Connectionless: 클라이언트가 요청을 보내고 서버의 응답을 주면 연결을 끊는다.</p>\n</blockquote>\n<p>초기에는 클라이언트의 IP 주소를 이용하여 식별하려 했으나 몇개의 문제점이 존재했습니다.</p>\n<ul>\n<li>여러 사용자가 한 대의 컴퓨터를 사용한다면 하나의 IP로 어떤 사용자인지 식별할 수 없다.</li>\n<li>인터넷 서비스 제공자(ISP)는 사용자가 로그인하면 동적으로 IP 주소를 할당한다. 매번 다른 주소를 받으므로 식별할 수 없다.</li>\n<li>네트워크 주소 변환(Network Address Translation, NAT) 방화벽을 통해 인터넷을 사용할 경우, NAT 장비는 실제 IP 주소를 방화벽 뒤로 숨기고, 내부에서 사용하는 하나의 방화벽 IP 주소(다른 포트번호)로 변환한다.</li>\n<li>HTTP 프락시와 게이트웨이는 원 서버에 새로운 TCP 연결을 한다. 웹 서버는 클라이언트의 IP 대신 프락시 서버의 IP 주소를 보게된다.</li>\n</ul>\n<p>이외에 여러 시도가 있었으나 간단히 소개드리겠습니다.</p>\n<ul>\n<li>사이트에 접속할때 마다 로그인을 요구하고 식별정보를 Authorization 헤더에 담아 요청할 것\n<ul>\n<li>사이트를 옮겨다닐 때 마다 매번 로그인을 해야 한다.</li>\n</ul>\n</li>\n<li>뚱뚱한 URL\n<ul>\n<li>URL에 버전과 식별번호를 붙여 보내 식별하려 했다.\n<ul>\n<li>URL이 못생김, 공유하지 못하는 URL, 캐시 사용 불가, 서버 부하 가중, URL 이탈</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>배경에 대해 길게 이야기해봤습니다. 이제 이러한 문제를 해결하고 지금까지도 쓰고 있는 <code class=\"language-text\">쿠키</code>를 살펴보겠습니다.</p>\n<h2 id=\"쿠키\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4\" aria-label=\"쿠키 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키</h2>\n<p>쿠키는 클라이언트(브라우저)에 저장되는 작은 데이터 조각입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/24623403/233010665-8e366b4f-7341-4eea-8bf2-53c91a180192.png\" alt=\"\"></p>\n<p>(크롬 개발자도구의 애플리케이션 탭에서 확인해볼 수 있습니다.)</p>\n<p>크롬의 경우 쿠키를 SQLite파일로 관리하고 있으며 Mac의 경우 <code class=\"language-text\">~/Library/Application Support/Google/Chrome/Default/Cookies</code>에서 확인해볼 수 있습니다.</p>\n<p>주요 필드의 의미는 다음과 같습니다.</p>\n<p><strong>creation_utc:</strong> 쿠키가 생성된 시점을 초 단위로 기술</p>\n<p><strong>host_key:</strong> 쿠키의 도메인</p>\n<p><strong>name:</strong> 쿠키의 이름</p>\n<p><strong>value:</strong> 쿠키의 값</p>\n<p><strong>path:</strong> 쿠키와 관련된 도메인에 있는 경로</p>\n<p><strong>expires_utc:</strong> 쿠키의 파기 시점을 초 단위로 기술</p>\n<p><strong>is_secure:</strong> 이 쿠키를 SSL 커넥션일 경우에만 보낼지 여부</p>\n<p>RFC 6265 표준 6.1에 따르면 브라우저의 저장 공간에 제한이 있겠으나 최소 다음은 만족해야 한다고 합니다.</p>\n<ul>\n<li>쿠키당 최소 4096Byte 이상(쿠키 이름, 값 및 속성의 길이 합계로 측정) 가능</li>\n<li>도메인당 최소 50개 이상의 쿠키 저장 가능</li>\n<li>총 3000개 최소 이상의 쿠키 저장 가능</li>\n</ul>\n<p>그러나 브라우저별로 구현사항이 미묘하게 다릅니다.</p>\n<h3 id=\"쿠키의-목적\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EB%AA%A9%EC%A0%81\" aria-label=\"쿠키의 목적 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키의 목적</h3>\n<p>세션 관리(Session management)</p>\n<ul>\n<li>서버에 저장해야 할 로그인, 장바구니, 게임 스코어 등의 정보 관리</li>\n</ul>\n<p>개인화(Personalization)</p>\n<ul>\n<li>사용자 선호, 테마 등의 세팅</li>\n</ul>\n<p>트래킹(Tracking)</p>\n<ul>\n<li>사용자 행동을 기록하고 분석하는 용도</li>\n</ul>\n<p>과거에는 클라이언트 측에 정보를 저장할 떄 쿠키를 주로 사용하곤 했으나 웹 스토리지가 등장하고 점점 사용하지 않는 추세입니다.</p>\n<h3 id=\"쿠키의-타입\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%ED%83%80%EC%9E%85\" aria-label=\"쿠키의 타입 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키의 타입</h3>\n<p>세션 쿠키(session cookie)와 지속 쿠키(persistent cookie) 두 가지 타입으로 나뉩니다.</p>\n<ul>\n<li><code class=\"language-text\">세션 쿠키</code>(session cookie)\n<ul>\n<li>사용자가 사이트를 탐색할 때, 관련한 설정과 선호 사항들을 저장하는 임시쿠키</li>\n<li>브라우저를 닫으면(세션이 종료되면) 삭제됨</li>\n</ul>\n</li>\n<li><code class=\"language-text\">지속 쿠키</code>(persistent cookie)\n<ul>\n<li>삭제되지 않고 더 길게 유지(세션이 종료되도 유지)</li>\n<li>디스크에 저장되어, 브라우저를 닫거나 컴퓨터를 재시작해도 남아있음</li>\n<li>주기적으로 방문하는 사이트 정보나 로그인 이름을 유지</li>\n</ul>\n</li>\n</ul>\n<p>둘의 다른 점은 <code class=\"language-text\">파기되는 시점</code>입니다. 파기되는 시점을 가리키는 Expires 혹은 Max-Age 파라미터가 없으면 세션쿠키입니다.</p>\n<h3 id=\"쿠키의-사용\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"쿠키의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>쿠키의 사용</h3>\n<p>클라이언트 요청에 대해 서버는 Response Header에 Set-Cookie 속성을 사용하여 클라이언트에 쿠키를 저장할 수 있습니다.</p>\n<table>\n<thead>\n<tr>\n<th>Set-Cookie 속성</th>\n<th>설명 및 용례</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name=value</td>\n<td>(필수) 큰 따옴표로 감싸지 않고 세미콜론, 쉼표, 등호, 공백을 포함하지 않는 문자열</td>\n</tr>\n<tr>\n<td>Expires</td>\n<td>(선택) 쿠키의 생명주기를 가리키는 날짜 문자열. 사용할 수 있는 타임존은 GMT. Expires가 없다면 세션쿠키</td>\n</tr>\n<tr>\n<td>Domain</td>\n<td>(선택) 이 속성에 기술된 도메인을 사용하는 서버로만 쿠키를 전송. 도메인 명시되어있지 않으면, Set-Cookie 응답을 생성한 서버의 호스트 명이 기본값으로 사용됨</td>\n</tr>\n<tr>\n<td>Path</td>\n<td>(선택) 서버에 있는 특정 경로만 쿠키를 할당. 경로가 명시되어있지 않으면, Set-Cookie 응답을 전달하는 URL의 경로가 사용됨</td>\n</tr>\n<tr>\n<td>Secure</td>\n<td>(선택) 이 속성이 포함되면, 쿠키는 HTTP가 SSL 보안 연결 사용할 때만 전달</td>\n</tr>\n</tbody>\n</table>\n<p>클라이언트가 서버에 요청을 보낼 때는 Domain, Path, Secure 필터들이 현재 요청하려는 사이트에 적합하면 파기되지 않은 쿠키들을 <code class=\"language-text\">자동</code>으로 보냅니다. 모든 쿠키는 Cookie 헤더에 세미콜론으로 구분하여 붙여 보냅니다.</p>\n<p><code class=\"language-text\">Cookie: session-id=002-123341-4444444; session-id-time=1007884800</code></p>\n<p>위의 사양은 **Version 0(넷스케이프)**이며 Version 1은 현재 널리 사용되고 있지는 않지만 Set-Cookie2, Cookie2헤더를 사용하며 복잡한 정의가 포함되어 있습니다. 이 글의 주제와는 벗어나는 것 같아 기회가 되면 다시 정리해보겠습니다.</p>\n<h3 id=\"요약\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD\" aria-label=\"요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<p>브라우저는 서버의 식별값을 쿠키에 저장하고 다시 요청을 보낼 때 자동으로 그 값을 보낸다.</p>\n<h3 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p>RFC 6265 표준 <a href=\"https://www.rfc-editor.org/rfc/rfc6265\">https://www.rfc-editor.org/rfc/rfc6265</a></p>\n<p>MDN Cookie: <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\">https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies</a></p>\n<h2 id=\"세션\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98\" aria-label=\"세션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세션</h2>\n<p>이쯤에서 하고싶은 말이 있는데, 세션이라는 단어가 너무 일반적으로 사용되는 단어라 혼용되기 쉬운 것 같습니다.</p>\n<ul>\n<li>HTTP session: HTTP 통신이 맺어지고 끝어지는 과정</li>\n<li>browser session: 브라우저가 사이트에 접속하고 탭이나 창을 닫기까지의 과정</li>\n<li>등등등 수많은 곳에서 세션이라는 단어가 사용될 수 있음..</li>\n</ul>\n<p>흔히들 쿠키와 세션을 비교하곤 하는데 여기서 말하는 세션이란 서버에서 클라언트 식별값을 관리하는 기법을 말합니다.</p>\n<p>쿠키를 통해 클라이언트 식별값을 저장하면 쿠키의 내용이 노출되는 보안 문제가 발생할 수 있습니다.(Cookie 헤더에 그 값이 담기기도 하고, 브라우저에 저장됨)</p>\n<p>따라서 클라이언트 식별값을 서버측에서 저장하고 있고 그것에 해당하는 id를 쿠키에 저장합니다. 이렇게 하면 다음 과정이 가능합니다.</p>\n<ol>\n<li>클라이언트 <strong>></strong> 서버 Request 요청(Session ID 미존재)</li>\n<li>서버 <strong>></strong> 클라이언트로 Session ID 쿠키 값 체크 후, 없을경우 새로 생성해서 응답</li>\n<li>클라이언트는 전달받은 Session ID 값을 매 요청마다 Header 쿠키에 담아서 전달</li>\n<li>서버는 Session ID로 사용자 식별</li>\n<li>클라이언트가 로그인 요청 시 서버에서는 session을 로그인한 사용자 정보로 갱신하고 새로운 Session ID를 발급하여 응답</li>\n<li>클라이언트가 이후에 사용자의 Session ID 쿠키를 요청과 함께 전달하고 서버에서도 해당 로그인 사용자로 식별</li>\n<li>클라이언트 종료(브라우저 종료) 시 Session ID 제거, 서버에서도 Session 제거</li>\n</ol>\n<h3 id=\"요약-1\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-1\" aria-label=\"요약 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약</h3>\n<ul>\n<li>따라서 이는 쿠키와 동떨어진 개념이 아니며 쿠키를 보안 문제를 보완하기 위해 사용된 기법이라고 할 수 있습니다.</li>\n<li>쿠키의 내용을 서버에 저장하고 쿠키에는 그 id만 담아서 관리하는 것입니다.</li>\n</ul>\n<p>저는 이러한 기법을 단순 session이 아니라 Server Session이라고 부르고 싶습니다. 서버측에서 session을 관리해주고 있기 때문이죠.</p>\n<p>추가로 서버 세션은 값을 저장하고 유지하고 있어야 하기 때문에 서버가 상태를 가지게 됩니다. 보통 캐시에 저장하기 떄문에 서버가 재실행하면 클라이언트를 식별하던 값이 모두 삭제될 수 있습니다. 이러한 문제를 해결하고자 JWT가 등장하였습니다.(추후 작성해보려 합니다)</p>\n<h3 id=\"참고자료-1\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C-1\" aria-label=\"참고자료 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h3>\n<p>MDN-HTTP 세션: <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Session\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Session</a></p>","frontmatter":{"date":"2023-04-19","title":"쿠키와 세션.. (세션?)","categories":"네트워크","author":"sjsjsj1246","emoji":"🍪"},"fields":{"slug":"/network/cookie_session/"}},"site":{"siteMetadata":{"siteUrl":"https://hislogs.com","comments":{"utterances":{"repo":"sjsjsj1246/hislogs"}}}}},"pageContext":{"slug":"/spring-boot-todolist/","nextSlug":"/js/1_variable/","prevSlug":"/network/cookie_session/"}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}